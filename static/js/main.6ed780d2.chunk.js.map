{"version":3,"sources":["monthNames.js","App.js","serviceWorker.js","index.js"],"names":["0","1","2","3","4","5","6","7","8","9","10","11","App","useState","name","setName","cpf","setCpf","price","setPrice","service","setService","city","setCity","Date","toJSON","substring","date","setDate","emitter","setEmitter","emitterCpf","setEmitterCpf","dateObj","className","type","value","onChange","target","maxLength","step","min","onClick","window","print","getUTCDate","monthNames","getUTCMonth","getUTCFullYear","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ed780d2.chunk.js","sourcesContent":["export default {\n    0: 'Janeiro',\n    1: 'Fevereiro',\n    2: 'Março',\n    3: 'Abril',\n    4: 'Maio',\n    5: 'Junho',\n    6: 'Julho',\n    7: 'Agosto',\n    8: 'Setembro',\n    9: 'Outubro',\n    10: 'Novembro',\n    11: 'Dezembro',\n}","import React, { useState } from 'react';\nimport monthNames from './monthNames';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState('Fulano de Tal');\n  const [cpf, setCpf] = useState('000.000.000-00');\n  const [price, setPrice] = useState('0.00');\n  const [service, setService] = useState('Alguma Coisa');\n  const [city, setCity] = useState('Goiânia');\n  const [date, setDate] = useState(new Date().toJSON().substring(0, 10));\n  const [emitter, setEmitter] = useState('Beltrano da Silva');\n  const [emitterCpf, setEmitterCpf] = useState('000.000.000-00');\n\n  const dateObj = new Date(date);\n\n  return (\n    <div className=\"App\">\n      <div className=\"data\">\n        <div className=\"field\">\n          <span>Nome do Pagador:</span>\n          <input type=\"text\" value={name} onChange={({ target: { value } }) => setName(value)} />\n        </div>\n        <div className=\"field\">\n          <span>CPF do Pagador:</span>\n          <input type=\"text\" value={cpf} maxLength={14} onChange={({ target: { value } }) => setCpf(value)} />\n        </div>\n        <div className=\"field\">\n          <span>Valor:</span>\n          <input type=\"number\" step=\"0.01\" min=\"0\" value={price} onChange={({ target: { value } }) => setPrice(value)} />\n        </div>\n        <div className=\"field\">\n          <span>Referente a:</span>\n          <input type=\"text\" value={service} onChange={({ target: { value } }) => setService(value)} />\n        </div>\n        <div className=\"field\">\n          <span>Cidade:</span>\n          <input type=\"text\" value={city} onChange={({ target: { value } }) => setCity(value)} />\n        </div>\n        <div className=\"field\">\n          <span>Data:</span>\n          <input type=\"date\" value={date} onChange={({ target: { value } }) => setDate(value)} />\n        </div>\n        <div className=\"field\">\n          <span>Nome do Emissor:</span>\n          <input type=\"text\" value={emitter} onChange={({ target: { value } }) => setEmitter(value)} />\n        </div>\n        <div className=\"field\">\n          <span>CPF do Emissor:</span>\n          <input type=\"text\" value={emitterCpf} maxLength={14} onChange={({ target: { value } }) => setEmitterCpf(value)} />\n        </div>\n        <div>\n          <button type=\"button\" onClick={() => window.print()}>Imprimir</button>\n        </div>\n        <hr />\n      </div>\n      <div className=\"receipt\">\n        <h1>Recibo</h1>\n        <p>Recebi de {name}, CPF {cpf}, a quantia de R$ {price} referente a {service}.</p>\n        <p className=\"footer\">{city}, {dateObj.getUTCDate()} de {monthNames[dateObj.getUTCMonth()]} de {dateObj.getUTCFullYear()}.</p>\n        <div className=\"footer\">\n          {emitter}<br />\n          CPF: {emitterCpf}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}